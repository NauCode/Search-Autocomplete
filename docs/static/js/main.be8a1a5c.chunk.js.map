{"version":3,"sources":["utils/countries.js","components/autoCompletedText/autoCompletedText.js","components/app/app.js","serviceWorker.js","index.js"],"names":["split","AutoCompletedText","props","getSuggestionsArray","val","suggestions","length","regex","RegExp","countries","sort","filter","v","test","onTextChange","e","value","target","setState","text","onFocus","renderSuggestions","state","className","map","item","index","key","onClick","selectedText","bind","this","id","type","onChange","placeholder","autoComplete","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPAAe,4/DAoMLA,MAAM,MChMKC,G,iBAGjB,WAAYC,GAAQ,IAAD,8BAGf,4CAAMA,KAYVC,oBAAsB,SAACC,GAEnB,IAAIC,EAAc,GAElB,GAAID,EAAIE,OAAS,EAAG,CAGhB,IAAMC,EAAQ,IAAIC,OAAJ,WAAeJ,GAAO,KACpCC,EAAcI,EAAUC,OAAOC,QAAO,SAAAC,GAAC,OAAIL,EAAMM,KAAKD,MAE1D,OAAOP,GAzBQ,EA8BnBS,aAAe,SAACC,GAEZ,IAAMC,EAAQD,EAAEE,OAAOD,MAEnBX,EAAc,EAAKF,oBAAoBa,GAI3C,EAAKE,UAAS,iBAAO,CACjBb,cACAc,KAAMH,OAxCK,EA+CnBI,QAAU,SAACL,GAEP,IAAMC,EAASD,EAAEE,OAAOD,MAEpBX,EAAc,EAAKF,oBAAoBa,GAI3C,EAAKE,UAAS,iBAAO,CACjBb,cACAc,KAAMH,OAzDK,EAyEnBK,kBAAoB,WAAM,IAEhBhB,EAAgB,EAAKiB,MAArBjB,YACN,OAA2B,IAAvBA,EAAYC,OAEL,KAGP,yBAAKiB,UAAU,kBACX,4BAIQlB,EAAYmB,KAAI,SAACC,EAAMC,GAAP,OAAkB,wBAAIC,IAAKD,EAAOE,QAAS,kBAAM,EAAKC,aAAaJ,KAAQA,EAAK,+BAAa,+BAAa,+BAAa,sCAjFvJ,EAAKH,MAAQ,CACTjB,YAAa,GACbc,KAAM,IAGV,EAAKL,aAAe,EAAKA,aAAagB,KAAlB,gBACpB,EAAKV,QAAU,EAAKA,QAAQU,KAAb,gBACf,EAAKD,aAAe,EAAKA,aAAaC,KAAlB,gBAZL,E,0EA+DNd,GAGTe,KAAKb,UAAS,iBAAO,CACjBC,KAAMH,EACNX,YAAa,S,+BA4BjB,IAAMc,EAAOY,KAAKT,MAAMH,KAExB,OACI,yBAAKa,GAAG,qBACJ,yBAAKA,GAAG,aACJ,sEAEA,yBAAKT,UAAU,iBACX,2BAAOS,GAAG,QAAQC,KAAK,OAAOb,QAASW,KAAKX,QAASc,SAAUH,KAAKjB,aAAcE,MAAOG,EAAMgB,YAAY,6BAA6BC,aAAa,QACrJ,0BAAMb,UAAU,gBACZ,8BAIPQ,KAAKV,0B,GAjHqBgB,IAAMC,YCUtCC,E,iLARX,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,W,GAJUe,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.be8a1a5c.chunk.js","sourcesContent":["export default `\r\nAfghanistan\r\nAlbania\r\nAlgeria\r\nAndorra\r\nAngola\r\nAntigua & Deps\r\nArgentina\r\nArmenia\r\nAustralia\r\nAustria\r\nAzerbaijan\r\nBahamas\r\nBahrain\r\nBangladesh\r\nBarbados\r\nBelarus\r\nBelgium\r\nBelize\r\nBenin\r\nBhutan\r\nBolivia\r\nBosnia Herzegovina\r\nBotswana\r\nBrazil\r\nBrunei\r\nBulgaria\r\nBurkina\r\nBurundi\r\nCambodia\r\nCameroon\r\nCanada\r\nCape Verde\r\nCentral African Rep\r\nChad\r\nChile\r\nChina\r\nColombia\r\nComoros\r\nCongo\r\nCongo {Democratic Rep}\r\nCosta Rica\r\nCroatia\r\nCuba\r\nCyprus\r\nCzech Republic\r\nDenmark\r\nDjibouti\r\nDominica\r\nDominican Republic\r\nEast Timor\r\nEcuador\r\nEgypt\r\nEl Salvador\r\nEquatorial Guinea\r\nEritrea\r\nEstonia\r\nEthiopia\r\nFiji\r\nFinland\r\nFrance\r\nGabon\r\nGambia\r\nGeorgia\r\nGermany\r\nGhana\r\nGreece\r\nGrenada\r\nGuatemala\r\nGuinea\r\nGuinea-Bissau\r\nGuyana\r\nHaiti\r\nHonduras\r\nHungary\r\nIceland\r\nIndia\r\nIndonesia\r\nIran\r\nIraq\r\nIreland {Republic}\r\nIsrael\r\nItaly\r\nIvory Coast\r\nJamaica\r\nJapan\r\nJordan\r\nKazakhstan\r\nKenya\r\nKiribati\r\nKorea North\r\nKorea South\r\nKosovo\r\nKuwait\r\nKyrgyzstan\r\nLaos\r\nLatvia\r\nLebanon\r\nLesotho\r\nLiberia\r\nLibya\r\nLiechtenstein\r\nLithuania\r\nLuxembourg\r\nMacedonia\r\nMadagascar\r\nMalawi\r\nMalaysia\r\nMaldives\r\nMali\r\nMalta\r\nMarshall Islands\r\nMauritania\r\nMauritius\r\nMexico\r\nMicronesia\r\nMoldova\r\nMonaco\r\nMongolia\r\nMontenegro\r\nMorocco\r\nMozambique\r\nMyanmar, {Burma}\r\nNamibia\r\nNauru\r\nNepal\r\nNetherlands\r\nNew Zealand\r\nNicaragua\r\nNiger\r\nNigeria\r\nNorway\r\nOman\r\nPakistan\r\nPalau\r\nPanama\r\nPapua New Guinea\r\nParaguay\r\nPeru\r\nPhilippines\r\nPoland\r\nPortugal\r\nQatar\r\nRomania\r\nRussian Federation\r\nRwanda\r\nSt Kitts & Nevis\r\nSt Lucia\r\nSaint Vincent & the Grenadines\r\nSamoa\r\nSan Marino\r\nSao Tome & Principe\r\nSaudi Arabia\r\nSenegal\r\nSerbia\r\nSeychelles\r\nSierra Leone\r\nSingapore\r\nSlovakia\r\nSlovenia\r\nSolomon Islands\r\nSomalia\r\nSouth Africa\r\nSouth Sudan\r\nSpain\r\nSri Lanka\r\nSudan\r\nSuriname\r\nSwaziland\r\nSweden\r\nSwitzerland\r\nSyria\r\nTaiwan\r\nTajikistan\r\nTanzania\r\nThailand\r\nTogo\r\nTonga\r\nTrinidad & Tobago\r\nTunisia\r\nTurkey\r\nTurkmenistan\r\nTuvalu\r\nUganda\r\nUkraine\r\nUnited Arab Emirates\r\nUnited Kingdom\r\nUnited States\r\nUruguay\r\nUzbekistan\r\nVanuatu\r\nVatican City\r\nVenezuela\r\nVietnam\r\nYemen\r\nZambia\r\nZimbabwe`.split('\\n');","import React from 'react';\r\nimport countries from '../../utils/countries';\r\nimport '../../assets/sass/global.scss';\r\n\r\nexport default class AutoCompletedText extends React.Component {\r\n\r\n    // The constructor\r\n    constructor(props) {\r\n        // We have to initialize the parent (React.Component)\r\n        // with the same props\r\n        super(props);\r\n        // And after that, configure the initial state\r\n        this.state = {\r\n            suggestions: [],\r\n            text: ''\r\n        };\r\n\r\n        this.onTextChange = this.onTextChange.bind(this);\r\n        this.onFocus = this.onFocus.bind(this);\r\n        this.selectedText = this.selectedText.bind(this);\r\n    }\r\n\r\n    getSuggestionsArray = (val) => {\r\n        // In this array we store the valid suggestions\r\n        let suggestions = [];\r\n        // We only have to search if the val length is greater than 0!\r\n        if (val.length > 0) {\r\n            // Using a Regex filter we can get from the countries list\r\n            // Just the countries starting with the value searched\r\n            const regex = new RegExp(`^${val}`, 'i');\r\n            suggestions = countries.sort().filter(v => regex.test(v))\r\n        }\r\n        return suggestions;\r\n    }\r\n\r\n    // Now we have to setup the function that control the events of the component\r\n    // First the one to manage when the text changes in the search field\r\n    onTextChange = (e) => {\r\n        // We have to get the value from the input\r\n        const value = e.target.value;\r\n\r\n        let suggestions = this.getSuggestionsArray(value);\r\n\r\n        // After we get the right suggestions array, we update the state with it\r\n        // So the UI is updated!\r\n        this.setState(() => ({\r\n            suggestions,\r\n            text: value\r\n        }));\r\n    }\r\n\r\n    // This functions runs when we get the focus on the input component\r\n    // To display the current input value's suggestion list\r\n    // (Only if there is something written in the input)\r\n    onFocus = (e) => {\r\n        // We have to get the value from the input\r\n        const value =  e.target.value;\r\n\r\n        let suggestions = this.getSuggestionsArray(value);\r\n\r\n        // After we get the right suggestions array, we update the state with it\r\n        // So the UI is updated!\r\n        this.setState(() => ({\r\n            suggestions,\r\n            text: value\r\n        }));\r\n    }\r\n\r\n    // This other function will manage when we select a item (country in this case)\r\n    // from our suggestions\r\n    selectedText(value) {\r\n        // In that case we update the state with the selection\r\n        // And clean the suggestions array so the suggestions list dissapear!\r\n        this.setState(() => ({\r\n            text: value,\r\n            suggestions: [],\r\n        }))\r\n    }\r\n\r\n    // This function is used to render the suggestions list\r\n    renderSuggestions = () => {\r\n        // We have to get the suggestions array from the component's state\r\n        let { suggestions } = this.state;\r\n        if (suggestions.length === 0) {\r\n            // If there is no suggestions, we don't need to render this component!\r\n            return null;\r\n        }\r\n        return (\r\n            <div className=\"suggestionsBox\">\r\n                <ul >\r\n                    {\r\n                        //  We use the map function to format each item of the array\r\n                        // Don't forget to add a key attrb since React needs it!\r\n                        suggestions.map((item, index) => (<li key={index} onClick={() => this.selectedText(item)}>{item}<span></span><span></span><span></span><span></span></li>))\r\n                    }\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // This is the render function every React component needs!\r\n    render() {\r\n        // First we save the vars we use from our state so we can work with them easily\r\n        const text = this.state.text;\r\n        // And now we render the component\r\n        return (\r\n            <div id=\"searchbox-wrapper\">\r\n                <div id=\"searchbox\">\r\n                    <h2>Which country would you like to visit?</h2>\r\n                    {/* Remember: we register the onTextChange function to work with the component's onChange event! */}\r\n                    <div className=\"input-wrapper\">\r\n                        <input id=\"query\" type=\"text\" onFocus={this.onFocus} onChange={this.onTextChange} value={text} placeholder=\"Start writing a country...\" autoComplete=\"off\" />\r\n                        <span className=\"focus-border\">\r\n                            <i></i>\r\n                        </span>\r\n                    </div>\r\n                    {/* Now we render the suggestions (if not null) */}\r\n                    {this.renderSuggestions()}\r\n                    {/* <span>Suggestions: {suggestions.length}</span> */}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, { Component } from 'react';\nimport AutoCompletedText from '../autoCompletedText/autoCompletedText';\nimport '../../assets/sass/global.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <AutoCompletedText />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}